{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","url","console","log","App","props","state","result","searchTerm","setSearchTopStories","bind","onDismiss","onSearchChange","this","setState","fetch","then","response","json","catch","error","id","alert","item","objectID","updatedList","list","filter","event","target","value","className","onChange","hits","pattern","Component","Search","children","type","largeColumn","width","midColumn","smallColumn","Table","title","toLowerCase","includes","map","key","style","href","author","num_comments","points","onClick","Button","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f8303d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst DEFAULT_QUERY = 'redux';\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}`;\n\nconsole.log(url);\n\nconst isSearched = searchTerm => item => \n  item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY,\n    };\n    // bind method to constructor to make it a class method\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  setSearchTopStories(result) {\n    this.setState({ result });\n  }\n\n  // fetches data\n  componentDidMount() {\n    const {\n      searchTerm\n    } = this.state;\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}`)\n      .then(response => response.json())\n      .then(result => this.setSearchTopStories(result))\n      .catch(error => error);\n  }\n\n  onDismiss(id) {\n    const isNotid = item => item.objectID !== id;\n    alert(isNotid);\n    const updatedList = this.state.list.filter(item => item.objectID !== id)\n    // updated state\n    this.setState({\n      list: updatedList,\n    })\n  }\n\n  onSearchChange(event) {\n    // update local state with a search term\n    this.setState({\n      searchTerm: event.target.value,\n    })\n  }\n\n  render() {\n    const {\n      searchTerm,\n      result\n    } = this.state;\n\n    // REMOVE COMMENT WHEN IN WIFI\n    if (!result) {\n      return null;\n    }\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n          >\n            Search\n          </Search>\n        </div>\n          <Table\n            list={result.hits}\n            pattern={searchTerm}\n            onDismiss={this.onDismiss}\n          />\n      </div>\n    );\n  }\n}\n\nconst Search = ({ value, onChange, children }) => \n    <form>\n      {children}\n      <input \n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </form>\n\n// CSS FOR TABLE COMPONENT\nconst largeColumn = {\n  width: '40%',\n}\n\nconst midColumn = {\n  width: '30%',\n}\n\nconst smallColumn = {\n  width: '10%',\n}\n\nconst Table = ({list, pattern, onDismiss}) => \n      <div className=\"table\">\n        {list.filter(isSearched(pattern)).map(item =>\n          <div key={item.objectID} className=\"table-row\">\n            <span style={largeColumn}>\n              <a href={item.url}>{item.title}</a>\n              <br />\n            </span>\n            <span style={midColumn}>\n              Author: {item.author}\n            </span><br />\n            <span style={smallColumn}>\n              Comments: {item.num_comments}\n            </span><br />\n            <span style={smallColumn}>\n              Points: {item.points}\n            </span><br />\n            <span style={smallColumn}>\n              <Button\n                onClick={() => onDismiss(item.objectID)}\n                className=\"button-inline\"\n              >\n                Dismiss\n              </Button>\n            </span>\n          </div>\n        )}\n      </div>\n\nclass Button extends Component {\n  render() {\n    const {\n      onClick,\n      className = '',\n      children\n    } = this.props;\n\n    return (\n      <button\n        onClick={onClick}\n        className={className}\n        type=\"button\"\n      >\n        {children}\n      </button>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n// prevents page reload, but updates changes\n// keeps console.log() statements in developer\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}